
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000848  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080009f0  080009f0  000109f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080009fc  080009fc  00010a04  2**0
                  CONTENTS
  4 .ARM          00000000  080009fc  080009fc  00010a04  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009fc  08000a04  00010a04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009fc  080009fc  000109fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a00  08000a00  00010a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010a04  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010a04  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001d3e  00000000  00000000  00010a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004fe  00000000  00000000  00012772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000180  00000000  00000000  00012c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000148  00000000  00000000  00012df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000025aa  00000000  00000000  00012f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000019c9  00000000  00000000  000154e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a13e  00000000  00000000  00016eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00020fe9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000580  00000000  00000000  0002103c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080009d8 	.word	0x080009d8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080009d8 	.word	0x080009d8

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode: 5
 */

void SPI2_GPIOInits(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80001fe:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <SPI2_GPIOInits+0x40>)
 8000200:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000202:	2302      	movs	r3, #2
 8000204:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000206:	2305      	movs	r3, #5
 8000208:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800020a:	2300      	movs	r3, #0
 800020c:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800020e:	2300      	movs	r3, #0
 8000210:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000212:	2302      	movs	r3, #2
 8000214:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000216:	230d      	movs	r3, #13
 8000218:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f90b 	bl	8000438 <GPIO_Init>
	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000222:	230f      	movs	r3, #15
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f905 	bl	8000438 <GPIO_Init>
//	GPIO_Init(&SPIPins);
	//NSS
//	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
//	GPIO_Init(&SPIPins);

}
 800022e:	bf00      	nop
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40020400 	.word	0x40020400

0800023c <SPI2_Inits>:

void SPI2_Inits(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b088      	sub	sp, #32
 8000240:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 8000242:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <SPI2_Inits+0x38>)
 8000244:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000246:	2301      	movs	r3, #1
 8000248:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800024a:	2301      	movs	r3, #1
 800024c:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;
 800024e:	2300      	movs	r3, #0
 8000250:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000252:	2300      	movs	r3, #0
 8000254:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000256:	2300      	movs	r3, #0
 8000258:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800025a:	2300      	movs	r3, #0
 800025c:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN; // software slave management enabled for NSS pin
 800025e:	2301      	movs	r3, #1
 8000260:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 8000262:	463b      	mov	r3, r7
 8000264:	4618      	mov	r0, r3
 8000266:	f000 fabb 	bl	80007e0 <SPI_Init>
}
 800026a:	bf00      	nop
 800026c:	3720      	adds	r7, #32
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40003800 	.word	0x40003800

08000278 <main>:

int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
	char user_data[] = "Hello World";
 800027e:	4a14      	ldr	r2, [pc, #80]	; (80002d0 <main+0x58>)
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	ca07      	ldmia	r2, {r0, r1, r2}
 8000284:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	// this function is used to initialize the GPIO Pins to behave as SPI2 pins
	SPI2_GPIOInits();
 8000288:	f7ff ffb6 	bl	80001f8 <SPI2_GPIOInits>

	//this function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 800028c:	f7ff ffd6 	bl	800023c <SPI2_Inits>

	//this makes NSS signal internally high and avoids MODF error
	SPI_SSIConfig(SPI2, ENABLE);
 8000290:	2101      	movs	r1, #1
 8000292:	4810      	ldr	r0, [pc, #64]	; (80002d4 <main+0x5c>)
 8000294:	f000 fb5f 	bl	8000956 <SPI_SSIConfig>

	//enable the SPI2 peripheral
	SPI_PeripheralControl(SPI2, ENABLE);
 8000298:	2101      	movs	r1, #1
 800029a:	480e      	ldr	r0, [pc, #56]	; (80002d4 <main+0x5c>)
 800029c:	f000 fb3f 	bl	800091e <SPI_PeripheralControl>

	//to send data
	SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	4618      	mov	r0, r3
 80002a4:	f7ff ffa0 	bl	80001e8 <strlen>
 80002a8:	4602      	mov	r2, r0
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4619      	mov	r1, r3
 80002ae:	4809      	ldr	r0, [pc, #36]	; (80002d4 <main+0x5c>)
 80002b0:	f000 fafe 	bl	80008b0 <SPI_SendData>

	 //confirm SPI is not busy
	 while(SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG));
 80002b4:	bf00      	nop
 80002b6:	2180      	movs	r1, #128	; 0x80
 80002b8:	4806      	ldr	r0, [pc, #24]	; (80002d4 <main+0x5c>)
 80002ba:	f000 fae5 	bl	8000888 <SPI_GetFlagStatus>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1f8      	bne.n	80002b6 <main+0x3e>

	 //disable the SPI2 peripheral
	 SPI_PeripheralControl(SPI2, DISABLE);
 80002c4:	2100      	movs	r1, #0
 80002c6:	4803      	ldr	r0, [pc, #12]	; (80002d4 <main+0x5c>)
 80002c8:	f000 fb29 	bl	800091e <SPI_PeripheralControl>
	while(1);
 80002cc:	e7fe      	b.n	80002cc <main+0x54>
 80002ce:	bf00      	nop
 80002d0:	080009f0 	.word	0x080009f0
 80002d4:	40003800 	.word	0x40003800

080002d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d8:	480d      	ldr	r0, [pc, #52]	; (8000310 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002da:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e0:	480c      	ldr	r0, [pc, #48]	; (8000314 <LoopForever+0x6>)
  ldr r1, =_edata
 80002e2:	490d      	ldr	r1, [pc, #52]	; (8000318 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e4:	4a0d      	ldr	r2, [pc, #52]	; (800031c <LoopForever+0xe>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e8:	e002      	b.n	80002f0 <LoopCopyDataInit>

080002ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ee:	3304      	adds	r3, #4

080002f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f4:	d3f9      	bcc.n	80002ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f6:	4a0a      	ldr	r2, [pc, #40]	; (8000320 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f8:	4c0a      	ldr	r4, [pc, #40]	; (8000324 <LoopForever+0x16>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002fc:	e001      	b.n	8000302 <LoopFillZerobss>

080002fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000300:	3204      	adds	r2, #4

08000302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000304:	d3fb      	bcc.n	80002fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000306:	f000 fb43 	bl	8000990 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030a:	f7ff ffb5 	bl	8000278 <main>

0800030e <LoopForever>:

LoopForever:
    b LoopForever
 800030e:	e7fe      	b.n	800030e <LoopForever>
  ldr   r0, =_estack
 8000310:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000318:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800031c:	08000a04 	.word	0x08000a04
  ldr r2, =_sbss
 8000320:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000324:	2000001c 	.word	0x2000001c

08000328 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000328:	e7fe      	b.n	8000328 <ADC_IRQHandler>
	...

0800032c <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	460b      	mov	r3, r1
 8000336:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000338:	78fb      	ldrb	r3, [r7, #3]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d161      	bne.n	8000402 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a33      	ldr	r2, [pc, #204]	; (8000410 <GPIO_PeriClockControl+0xe4>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000346:	4b33      	ldr	r3, [pc, #204]	; (8000414 <GPIO_PeriClockControl+0xe8>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034a:	4a32      	ldr	r2, [pc, #200]	; (8000414 <GPIO_PeriClockControl+0xe8>)
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//TODO
	}

}
 8000352:	e056      	b.n	8000402 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a30      	ldr	r2, [pc, #192]	; (8000418 <GPIO_PeriClockControl+0xec>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d106      	bne.n	800036a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800035c:	4b2d      	ldr	r3, [pc, #180]	; (8000414 <GPIO_PeriClockControl+0xe8>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000360:	4a2c      	ldr	r2, [pc, #176]	; (8000414 <GPIO_PeriClockControl+0xe8>)
 8000362:	f043 0302 	orr.w	r3, r3, #2
 8000366:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000368:	e04b      	b.n	8000402 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a2b      	ldr	r2, [pc, #172]	; (800041c <GPIO_PeriClockControl+0xf0>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d106      	bne.n	8000380 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000372:	4b28      	ldr	r3, [pc, #160]	; (8000414 <GPIO_PeriClockControl+0xe8>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000376:	4a27      	ldr	r2, [pc, #156]	; (8000414 <GPIO_PeriClockControl+0xe8>)
 8000378:	f043 0304 	orr.w	r3, r3, #4
 800037c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037e:	e040      	b.n	8000402 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a27      	ldr	r2, [pc, #156]	; (8000420 <GPIO_PeriClockControl+0xf4>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d106      	bne.n	8000396 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000388:	4b22      	ldr	r3, [pc, #136]	; (8000414 <GPIO_PeriClockControl+0xe8>)
 800038a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038c:	4a21      	ldr	r2, [pc, #132]	; (8000414 <GPIO_PeriClockControl+0xe8>)
 800038e:	f043 0308 	orr.w	r3, r3, #8
 8000392:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000394:	e035      	b.n	8000402 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a22      	ldr	r2, [pc, #136]	; (8000424 <GPIO_PeriClockControl+0xf8>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d106      	bne.n	80003ac <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800039e:	4b1d      	ldr	r3, [pc, #116]	; (8000414 <GPIO_PeriClockControl+0xe8>)
 80003a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a2:	4a1c      	ldr	r2, [pc, #112]	; (8000414 <GPIO_PeriClockControl+0xe8>)
 80003a4:	f043 0310 	orr.w	r3, r3, #16
 80003a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003aa:	e02a      	b.n	8000402 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a1e      	ldr	r2, [pc, #120]	; (8000428 <GPIO_PeriClockControl+0xfc>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d106      	bne.n	80003c2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003b4:	4b17      	ldr	r3, [pc, #92]	; (8000414 <GPIO_PeriClockControl+0xe8>)
 80003b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b8:	4a16      	ldr	r2, [pc, #88]	; (8000414 <GPIO_PeriClockControl+0xe8>)
 80003ba:	f043 0320 	orr.w	r3, r3, #32
 80003be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c0:	e01f      	b.n	8000402 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a19      	ldr	r2, [pc, #100]	; (800042c <GPIO_PeriClockControl+0x100>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d106      	bne.n	80003d8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003ca:	4b12      	ldr	r3, [pc, #72]	; (8000414 <GPIO_PeriClockControl+0xe8>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ce:	4a11      	ldr	r2, [pc, #68]	; (8000414 <GPIO_PeriClockControl+0xe8>)
 80003d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d6:	e014      	b.n	8000402 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a15      	ldr	r2, [pc, #84]	; (8000430 <GPIO_PeriClockControl+0x104>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d106      	bne.n	80003ee <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <GPIO_PeriClockControl+0xe8>)
 80003e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e4:	4a0b      	ldr	r2, [pc, #44]	; (8000414 <GPIO_PeriClockControl+0xe8>)
 80003e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ec:	e009      	b.n	8000402 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a10      	ldr	r2, [pc, #64]	; (8000434 <GPIO_PeriClockControl+0x108>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d105      	bne.n	8000402 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80003f6:	4b07      	ldr	r3, [pc, #28]	; (8000414 <GPIO_PeriClockControl+0xe8>)
 80003f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fa:	4a06      	ldr	r2, [pc, #24]	; (8000414 <GPIO_PeriClockControl+0xe8>)
 80003fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000400:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000402:	bf00      	nop
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40020000 	.word	0x40020000
 8000414:	40023800 	.word	0x40023800
 8000418:	40020400 	.word	0x40020400
 800041c:	40020800 	.word	0x40020800
 8000420:	40020c00 	.word	0x40020c00
 8000424:	40021000 	.word	0x40021000
 8000428:	40021400 	.word	0x40021400
 800042c:	40021800 	.word	0x40021800
 8000430:	40021c00 	.word	0x40021c00
 8000434:	40022000 	.word	0x40022000

08000438 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2101      	movs	r1, #1
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff ff6e 	bl	800032c <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	795b      	ldrb	r3, [r3, #5]
 8000454:	2b03      	cmp	r3, #3
 8000456:	d820      	bhi.n	800049a <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	795b      	ldrb	r3, [r3, #5]
 800045c:	461a      	mov	r2, r3
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	791b      	ldrb	r3, [r3, #4]
 8000462:	005b      	lsls	r3, r3, #1
 8000464:	fa02 f303 	lsl.w	r3, r2, r3
 8000468:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	791b      	ldrb	r3, [r3, #4]
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	2103      	movs	r1, #3
 8000478:	fa01 f303 	lsl.w	r3, r1, r3
 800047c:	43db      	mvns	r3, r3
 800047e:	4619      	mov	r1, r3
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	400a      	ands	r2, r1
 8000486:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	6819      	ldr	r1, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	697a      	ldr	r2, [r7, #20]
 8000494:	430a      	orrs	r2, r1
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	e0cb      	b.n	8000632 <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	795b      	ldrb	r3, [r3, #5]
 800049e:	2b04      	cmp	r3, #4
 80004a0:	d117      	bne.n	80004d2 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a2:	4b4b      	ldr	r3, [pc, #300]	; (80005d0 <GPIO_Init+0x198>)
 80004a4:	68db      	ldr	r3, [r3, #12]
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	7912      	ldrb	r2, [r2, #4]
 80004aa:	4611      	mov	r1, r2
 80004ac:	2201      	movs	r2, #1
 80004ae:	408a      	lsls	r2, r1
 80004b0:	4611      	mov	r1, r2
 80004b2:	4a47      	ldr	r2, [pc, #284]	; (80005d0 <GPIO_Init+0x198>)
 80004b4:	430b      	orrs	r3, r1
 80004b6:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004b8:	4b45      	ldr	r3, [pc, #276]	; (80005d0 <GPIO_Init+0x198>)
 80004ba:	689b      	ldr	r3, [r3, #8]
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	7912      	ldrb	r2, [r2, #4]
 80004c0:	4611      	mov	r1, r2
 80004c2:	2201      	movs	r2, #1
 80004c4:	408a      	lsls	r2, r1
 80004c6:	43d2      	mvns	r2, r2
 80004c8:	4611      	mov	r1, r2
 80004ca:	4a41      	ldr	r2, [pc, #260]	; (80005d0 <GPIO_Init+0x198>)
 80004cc:	400b      	ands	r3, r1
 80004ce:	6093      	str	r3, [r2, #8]
 80004d0:	e035      	b.n	800053e <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	795b      	ldrb	r3, [r3, #5]
 80004d6:	2b05      	cmp	r3, #5
 80004d8:	d117      	bne.n	800050a <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004da:	4b3d      	ldr	r3, [pc, #244]	; (80005d0 <GPIO_Init+0x198>)
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	7912      	ldrb	r2, [r2, #4]
 80004e2:	4611      	mov	r1, r2
 80004e4:	2201      	movs	r2, #1
 80004e6:	408a      	lsls	r2, r1
 80004e8:	4611      	mov	r1, r2
 80004ea:	4a39      	ldr	r2, [pc, #228]	; (80005d0 <GPIO_Init+0x198>)
 80004ec:	430b      	orrs	r3, r1
 80004ee:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f0:	4b37      	ldr	r3, [pc, #220]	; (80005d0 <GPIO_Init+0x198>)
 80004f2:	68db      	ldr	r3, [r3, #12]
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	7912      	ldrb	r2, [r2, #4]
 80004f8:	4611      	mov	r1, r2
 80004fa:	2201      	movs	r2, #1
 80004fc:	408a      	lsls	r2, r1
 80004fe:	43d2      	mvns	r2, r2
 8000500:	4611      	mov	r1, r2
 8000502:	4a33      	ldr	r2, [pc, #204]	; (80005d0 <GPIO_Init+0x198>)
 8000504:	400b      	ands	r3, r1
 8000506:	60d3      	str	r3, [r2, #12]
 8000508:	e019      	b.n	800053e <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	795b      	ldrb	r3, [r3, #5]
 800050e:	2b06      	cmp	r3, #6
 8000510:	d115      	bne.n	800053e <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000512:	4b2f      	ldr	r3, [pc, #188]	; (80005d0 <GPIO_Init+0x198>)
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	7912      	ldrb	r2, [r2, #4]
 800051a:	4611      	mov	r1, r2
 800051c:	2201      	movs	r2, #1
 800051e:	408a      	lsls	r2, r1
 8000520:	4611      	mov	r1, r2
 8000522:	4a2b      	ldr	r2, [pc, #172]	; (80005d0 <GPIO_Init+0x198>)
 8000524:	430b      	orrs	r3, r1
 8000526:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000528:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <GPIO_Init+0x198>)
 800052a:	68db      	ldr	r3, [r3, #12]
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	7912      	ldrb	r2, [r2, #4]
 8000530:	4611      	mov	r1, r2
 8000532:	2201      	movs	r2, #1
 8000534:	408a      	lsls	r2, r1
 8000536:	4611      	mov	r1, r2
 8000538:	4a25      	ldr	r2, [pc, #148]	; (80005d0 <GPIO_Init+0x198>)
 800053a:	430b      	orrs	r3, r1
 800053c:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	791b      	ldrb	r3, [r3, #4]
 8000542:	089b      	lsrs	r3, r3, #2
 8000544:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	791b      	ldrb	r3, [r3, #4]
 800054a:	f003 0303 	and.w	r3, r3, #3
 800054e:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a1f      	ldr	r2, [pc, #124]	; (80005d4 <GPIO_Init+0x19c>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d04e      	beq.n	80005f8 <GPIO_Init+0x1c0>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a1e      	ldr	r2, [pc, #120]	; (80005d8 <GPIO_Init+0x1a0>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d032      	beq.n	80005ca <GPIO_Init+0x192>
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a1c      	ldr	r2, [pc, #112]	; (80005dc <GPIO_Init+0x1a4>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d02b      	beq.n	80005c6 <GPIO_Init+0x18e>
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a1b      	ldr	r2, [pc, #108]	; (80005e0 <GPIO_Init+0x1a8>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d024      	beq.n	80005c2 <GPIO_Init+0x18a>
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a19      	ldr	r2, [pc, #100]	; (80005e4 <GPIO_Init+0x1ac>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d01d      	beq.n	80005be <GPIO_Init+0x186>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a18      	ldr	r2, [pc, #96]	; (80005e8 <GPIO_Init+0x1b0>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d016      	beq.n	80005ba <GPIO_Init+0x182>
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a16      	ldr	r2, [pc, #88]	; (80005ec <GPIO_Init+0x1b4>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d00f      	beq.n	80005b6 <GPIO_Init+0x17e>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <GPIO_Init+0x1b8>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d008      	beq.n	80005b2 <GPIO_Init+0x17a>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <GPIO_Init+0x1bc>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d101      	bne.n	80005ae <GPIO_Init+0x176>
 80005aa:	2308      	movs	r3, #8
 80005ac:	e025      	b.n	80005fa <GPIO_Init+0x1c2>
 80005ae:	2300      	movs	r3, #0
 80005b0:	e023      	b.n	80005fa <GPIO_Init+0x1c2>
 80005b2:	2307      	movs	r3, #7
 80005b4:	e021      	b.n	80005fa <GPIO_Init+0x1c2>
 80005b6:	2306      	movs	r3, #6
 80005b8:	e01f      	b.n	80005fa <GPIO_Init+0x1c2>
 80005ba:	2305      	movs	r3, #5
 80005bc:	e01d      	b.n	80005fa <GPIO_Init+0x1c2>
 80005be:	2304      	movs	r3, #4
 80005c0:	e01b      	b.n	80005fa <GPIO_Init+0x1c2>
 80005c2:	2303      	movs	r3, #3
 80005c4:	e019      	b.n	80005fa <GPIO_Init+0x1c2>
 80005c6:	2302      	movs	r3, #2
 80005c8:	e017      	b.n	80005fa <GPIO_Init+0x1c2>
 80005ca:	2301      	movs	r3, #1
 80005cc:	e015      	b.n	80005fa <GPIO_Init+0x1c2>
 80005ce:	bf00      	nop
 80005d0:	40013c00 	.word	0x40013c00
 80005d4:	40020000 	.word	0x40020000
 80005d8:	40020400 	.word	0x40020400
 80005dc:	40020800 	.word	0x40020800
 80005e0:	40020c00 	.word	0x40020c00
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40021400 	.word	0x40021400
 80005ec:	40021800 	.word	0x40021800
 80005f0:	40021c00 	.word	0x40021c00
 80005f4:	40022000 	.word	0x40022000
 80005f8:	2300      	movs	r3, #0
 80005fa:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80005fc:	4b59      	ldr	r3, [pc, #356]	; (8000764 <GPIO_Init+0x32c>)
 80005fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000600:	4a58      	ldr	r2, [pc, #352]	; (8000764 <GPIO_Init+0x32c>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000606:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000608:	7c7a      	ldrb	r2, [r7, #17]
 800060a:	7cbb      	ldrb	r3, [r7, #18]
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	fa02 f103 	lsl.w	r1, r2, r3
 8000612:	4a55      	ldr	r2, [pc, #340]	; (8000768 <GPIO_Init+0x330>)
 8000614:	7cfb      	ldrb	r3, [r7, #19]
 8000616:	3302      	adds	r3, #2
 8000618:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800061c:	4b53      	ldr	r3, [pc, #332]	; (800076c <GPIO_Init+0x334>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	7912      	ldrb	r2, [r2, #4]
 8000624:	4611      	mov	r1, r2
 8000626:	2201      	movs	r2, #1
 8000628:	408a      	lsls	r2, r1
 800062a:	4611      	mov	r1, r2
 800062c:	4a4f      	ldr	r2, [pc, #316]	; (800076c <GPIO_Init+0x334>)
 800062e:	430b      	orrs	r3, r1
 8000630:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	799b      	ldrb	r3, [r3, #6]
 8000636:	461a      	mov	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	791b      	ldrb	r3, [r3, #4]
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	fa02 f303 	lsl.w	r3, r2, r3
 8000642:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	689a      	ldr	r2, [r3, #8]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	2103      	movs	r1, #3
 8000652:	fa01 f303 	lsl.w	r3, r1, r3
 8000656:	43db      	mvns	r3, r3
 8000658:	4619      	mov	r1, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	400a      	ands	r2, r1
 8000660:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	6899      	ldr	r1, [r3, #8]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	697a      	ldr	r2, [r7, #20]
 800066e:	430a      	orrs	r2, r1
 8000670:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	79db      	ldrb	r3, [r3, #7]
 8000676:	461a      	mov	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	791b      	ldrb	r3, [r3, #4]
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	fa02 f303 	lsl.w	r3, r2, r3
 8000682:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	68da      	ldr	r2, [r3, #12]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	2103      	movs	r1, #3
 8000692:	fa01 f303 	lsl.w	r3, r1, r3
 8000696:	43db      	mvns	r3, r3
 8000698:	4619      	mov	r1, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	400a      	ands	r2, r1
 80006a0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	68d9      	ldr	r1, [r3, #12]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	697a      	ldr	r2, [r7, #20]
 80006ae:	430a      	orrs	r2, r1
 80006b0:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	7a1b      	ldrb	r3, [r3, #8]
 80006b6:	461a      	mov	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	791b      	ldrb	r3, [r3, #4]
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	685a      	ldr	r2, [r3, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	4619      	mov	r1, r3
 80006ce:	2301      	movs	r3, #1
 80006d0:	408b      	lsls	r3, r1
 80006d2:	43db      	mvns	r3, r3
 80006d4:	4619      	mov	r1, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	400a      	ands	r2, r1
 80006dc:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	6859      	ldr	r1, [r3, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	697a      	ldr	r2, [r7, #20]
 80006ea:	430a      	orrs	r2, r1
 80006ec:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	795b      	ldrb	r3, [r3, #5]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d131      	bne.n	800075a <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	791b      	ldrb	r3, [r3, #4]
 80006fa:	08db      	lsrs	r3, r3, #3
 80006fc:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	791b      	ldrb	r3, [r3, #4]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	7c3a      	ldrb	r2, [r7, #16]
 800070e:	3208      	adds	r2, #8
 8000710:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	220f      	movs	r2, #15
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	43db      	mvns	r3, r3
 8000720:	4618      	mov	r0, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	7c3a      	ldrb	r2, [r7, #16]
 8000728:	4001      	ands	r1, r0
 800072a:	3208      	adds	r2, #8
 800072c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	7c3a      	ldrb	r2, [r7, #16]
 8000736:	3208      	adds	r2, #8
 8000738:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7a5b      	ldrb	r3, [r3, #9]
 8000740:	461a      	mov	r2, r3
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	4618      	mov	r0, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	7c3a      	ldrb	r2, [r7, #16]
 8000752:	4301      	orrs	r1, r0
 8000754:	3208      	adds	r2, #8
 8000756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 800075a:	bf00      	nop
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40013800 	.word	0x40013800
 800076c:	40013c00 	.word	0x40013c00

08000770 <SPI_PeriClockControl>:
/*
 *
 * Peripheral Clock setup
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	460b      	mov	r3, r1
 800077a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d11f      	bne.n	80007c2 <SPI_PeriClockControl+0x52>
		{
			if(pSPIx == SPI1)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <SPI_PeriClockControl+0x60>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d106      	bne.n	8000798 <SPI_PeriClockControl+0x28>
			{
				SPI1_PCLK_EN();
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <SPI_PeriClockControl+0x64>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078e:	4a11      	ldr	r2, [pc, #68]	; (80007d4 <SPI_PeriClockControl+0x64>)
 8000790:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000794:	6453      	str	r3, [r2, #68]	; 0x44
		else
		{
			//TODO
		}

}
 8000796:	e014      	b.n	80007c2 <SPI_PeriClockControl+0x52>
			else if (pSPIx == SPI2)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <SPI_PeriClockControl+0x68>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d106      	bne.n	80007ae <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <SPI_PeriClockControl+0x64>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <SPI_PeriClockControl+0x64>)
 80007a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007aa:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007ac:	e009      	b.n	80007c2 <SPI_PeriClockControl+0x52>
			else if (pSPIx == SPI3)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <SPI_PeriClockControl+0x6c>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d105      	bne.n	80007c2 <SPI_PeriClockControl+0x52>
				SPI3_PCLK_EN();
 80007b6:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <SPI_PeriClockControl+0x64>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	4a06      	ldr	r2, [pc, #24]	; (80007d4 <SPI_PeriClockControl+0x64>)
 80007bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007c0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40013000 	.word	0x40013000
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40003800 	.word	0x40003800
 80007dc:	40003c00 	.word	0x40003c00

080007e0 <SPI_Init>:

/*
 * Init and De-init
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2101      	movs	r1, #1
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ffbe 	bl	8000770 <SPI_PeriClockControl>

	//first configure the SPI_CR1 register

	uint32_t tempreg = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	791b      	ldrb	r3, [r3, #4]
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	461a      	mov	r2, r3
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4313      	orrs	r3, r2
 8000804:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	795b      	ldrb	r3, [r3, #5]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d104      	bne.n	8000818 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	e014      	b.n	8000842 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	795b      	ldrb	r3, [r3, #5]
 800081c:	2b02      	cmp	r3, #2
 800081e:	d104      	bne.n	800082a <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	e00b      	b.n	8000842 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	795b      	ldrb	r3, [r3, #5]
 800082e:	2b03      	cmp	r3, #3
 8000830:	d107      	bne.n	8000842 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000838:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RXONLY);
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000840:	60fb      	str	r3, [r7, #12]
	}
	//3. Configure the SPI serial clock speed(baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	799b      	ldrb	r3, [r3, #6]
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	461a      	mov	r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	4313      	orrs	r3, r2
 800084e:	60fb      	str	r3, [r7, #12]

	//4. Configure DDF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	79db      	ldrb	r3, [r3, #7]
 8000854:	02db      	lsls	r3, r3, #11
 8000856:	461a      	mov	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4313      	orrs	r3, r2
 800085c:	60fb      	str	r3, [r7, #12]

	//5. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	7a1b      	ldrb	r3, [r3, #8]
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	461a      	mov	r2, r3
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	4313      	orrs	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]

	//6. Configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	7a5b      	ldrb	r3, [r3, #9]
 8000870:	461a      	mov	r2, r3
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	4313      	orrs	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]


	pSPIHandle->pSPIx->CR1 = tempreg;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	601a      	str	r2, [r3, #0]
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <SPI_GetFlagStatus>:

void SPI_DeInit(SPI_RegDef_t *pSPIx);

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	689a      	ldr	r2, [r3, #8]
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	4013      	ands	r3, r2
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800089e:	2301      	movs	r3, #1
 80008a0:	e000      	b.n	80008a4 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <SPI_SendData>:
/*
 * @Note    -This is a blocking call
 */

void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer, uint32_t Len)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 80008bc:	e027      	b.n	800090e <SPI_SendData+0x5e>
	{
		//1. wait until TXE is set.
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 80008be:	bf00      	nop
 80008c0:	2102      	movs	r1, #2
 80008c2:	68f8      	ldr	r0, [r7, #12]
 80008c4:	f7ff ffe0 	bl	8000888 <SPI_GetFlagStatus>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d0f8      	beq.n	80008c0 <SPI_SendData+0x10>

		//2. check the DFF bit in CR1
		if( (pSPIx->CR1 &( 1 << SPI_CR1_DFF)) )
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d00e      	beq.n	80008f8 <SPI_SendData+0x48>
		{
			//16 BIT DFF
			//1. load the data in to the DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	461a      	mov	r2, r3
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	60da      	str	r2, [r3, #12]
			Len--;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	607b      	str	r3, [r7, #4]
			Len--;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	3301      	adds	r3, #1
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	e00a      	b.n	800090e <SPI_SendData+0x5e>
		}
		else
		{
			// 8 BIT DFF
			pSPIx->DR = *(pTxBuffer);
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	60da      	str	r2, [r3, #12]
			Len--;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3b01      	subs	r3, #1
 8000906:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	3301      	adds	r3, #1
 800090c:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1d4      	bne.n	80008be <SPI_SendData+0xe>
		}
	}
}
 8000914:	bf00      	nop
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <SPI_PeripheralControl>:
}



void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	460b      	mov	r3, r1
 8000928:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800092a:	78fb      	ldrb	r3, [r7, #3]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d106      	bne.n	800093e <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 800093c:	e005      	b.n	800094a <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	601a      	str	r2, [r3, #0]
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <SPI_SSIConfig>:

void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000956:	b480      	push	{r7}
 8000958:	b083      	sub	sp, #12
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
 800095e:	460b      	mov	r3, r1
 8000960:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000962:	78fb      	ldrb	r3, [r7, #3]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d106      	bne.n	8000976 <SPI_SSIConfig+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}
 8000974:	e005      	b.n	8000982 <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	601a      	str	r2, [r3, #0]
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
	...

08000990 <__libc_init_array>:
 8000990:	b570      	push	{r4, r5, r6, lr}
 8000992:	4d0d      	ldr	r5, [pc, #52]	; (80009c8 <__libc_init_array+0x38>)
 8000994:	4c0d      	ldr	r4, [pc, #52]	; (80009cc <__libc_init_array+0x3c>)
 8000996:	1b64      	subs	r4, r4, r5
 8000998:	10a4      	asrs	r4, r4, #2
 800099a:	2600      	movs	r6, #0
 800099c:	42a6      	cmp	r6, r4
 800099e:	d109      	bne.n	80009b4 <__libc_init_array+0x24>
 80009a0:	4d0b      	ldr	r5, [pc, #44]	; (80009d0 <__libc_init_array+0x40>)
 80009a2:	4c0c      	ldr	r4, [pc, #48]	; (80009d4 <__libc_init_array+0x44>)
 80009a4:	f000 f818 	bl	80009d8 <_init>
 80009a8:	1b64      	subs	r4, r4, r5
 80009aa:	10a4      	asrs	r4, r4, #2
 80009ac:	2600      	movs	r6, #0
 80009ae:	42a6      	cmp	r6, r4
 80009b0:	d105      	bne.n	80009be <__libc_init_array+0x2e>
 80009b2:	bd70      	pop	{r4, r5, r6, pc}
 80009b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80009b8:	4798      	blx	r3
 80009ba:	3601      	adds	r6, #1
 80009bc:	e7ee      	b.n	800099c <__libc_init_array+0xc>
 80009be:	f855 3b04 	ldr.w	r3, [r5], #4
 80009c2:	4798      	blx	r3
 80009c4:	3601      	adds	r6, #1
 80009c6:	e7f2      	b.n	80009ae <__libc_init_array+0x1e>
 80009c8:	080009fc 	.word	0x080009fc
 80009cc:	080009fc 	.word	0x080009fc
 80009d0:	080009fc 	.word	0x080009fc
 80009d4:	08000a00 	.word	0x08000a00

080009d8 <_init>:
 80009d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009da:	bf00      	nop
 80009dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009de:	bc08      	pop	{r3}
 80009e0:	469e      	mov	lr, r3
 80009e2:	4770      	bx	lr

080009e4 <_fini>:
 80009e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e6:	bf00      	nop
 80009e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ea:	bc08      	pop	{r3}
 80009ec:	469e      	mov	lr, r3
 80009ee:	4770      	bx	lr
